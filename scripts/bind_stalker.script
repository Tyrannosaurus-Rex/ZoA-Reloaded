function init( obj )
	xr_motivator.AddToMotivator( obj )
end

function actor_init( npc )
	npc:bind_object( actor_binder( npc ) )
	-- level_tasks.add_location(707,"blue_location","Лукаш")
	-- level_tasks.add_location(702,"blue_location","Макс")
	-- level_tasks.add_location(728,"blue_location","Повар")
end

local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
	}

--lasthealth			= 0
--lasttime			= 0
post_process		= 0
local weapon_hide	= false
local ini			= system_ini()

----------------------------------------------------------------------------------------------------------------------

class "actor_binder"( object_binder )

----------------------------------------------------------------------------------------------------------------------

function actor_binder:__init (obj) super(obj)
	self.bCheckStart = false
	self.weather_manager = level_weathers.WeatherManager()
	self.actor_detector = xr_detector.actor_detector()
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:net_spawn( data )
	--printf("actor net spawn")

	level.show_indicators()

	self.bCheckStart = true
	self.weapon_hide = false -- спрятано или нет оружие при разговоре.
	weapon_hide = false -- устанавливаем глобальный дефолтовый флаг.

	if object_binder.net_spawn(self,data) == false then
		return false
	end

	db.add_actor(self.object)
	-- nv100217 permanent radiation cure
	if self.actor_detector.init_time ~= -1 then
		self.actor_detector:actor_enter()
	end

	if self.st.disable_input_time == nil then
		level.enable_input()
	end

	self.weather_manager:reset()
	--game_stats.initialize ()

	--ui_cop_pda.add_custom_inv()

	if actor_stats.add_to_ranking ~= nil then
		actor_stats.add_to_ranking( self.object:id() )
	end

	zoa_periodic_functions.onLoad()

	death_manager.init_drop_settings()

	if xrs_ai then
		xrs_ai.actor_net_spawn(self)
	end
	if rx_ai then
		rx_ai.actor_net_spawn()
	end
	amk.on_game_load(obj)
	gps_habar.on_game_load()

	return true
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:net_destroy()
	amk.on_game_save(obj)

	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end

	db.del_actor(self.object)

	--COPINV start--
	ui_cop_health.remove_custom_inv()
	ui_cop_stamina.remove_custom_inv()
	ui_cop_psy.remove_custom_inv()
	ui_cop_rad.remove_rad_green()
	ui_cop_rad.remove_rad_yellow()
	ui_cop_rad.remove_rad_orange()
	ui_cop_rad.remove_rad_red()
	ui_cop_rad.remove_rad_empty()
	ui_cop_blood.remove_blood_green()
	ui_cop_blood.remove_blood_yellow()
	ui_cop_blood.remove_blood_orange()
	ui_cop_blood.remove_blood_red()
	ui_cop_blood.remove_blood_empty()
	ui_faction.remove_custom_inv()
	ui_faction_player.remove_custom_inv()
	--ui_cop_pda.remove_custom_inv()
	--COPINV end--

	sr_light.clean_up()

	self.object:set_callback(callback.inventory_info,		nil)
	self.object:set_callback(callback.article_info,			nil)
	self.object:set_callback(callback.on_item_take,			nil)
	self.object:set_callback(callback.on_item_drop,			nil)
	self.object:set_callback(callback.use_object,			nil)
	--self.object:set_callback(callback.actor_sleep,		nil)
	self.object:set_callback(callback.task_state,			nil)
	self.object:set_callback(callback.level_border_enter,	nil)
	self.object:set_callback(callback.level_border_exit,	nil)
	self.object:set_callback(callback.take_item_from_box,	nil)
	self.object:set_callback(callback.death,				nil)

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	xr_sound.stop_all_sound_object()

	object_binder.net_destroy(self)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:reinit()
	object_binder.reinit(self)

	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.next_restrictors_update_time = -10000

	self.object:set_callback(callback.inventory_info,		self.info_callback,					self)
	self.object:set_callback(callback.article_info,			self.article_callback,				self)
	self.object:set_callback(callback.on_item_take,			self.on_item_take,					self)
	self.object:set_callback(callback.on_item_drop,			self.on_item_drop,					self)
	self.object:set_callback(callback.use_object,			self.use_object,					self)
	self.object:set_callback(callback.trade_sell_buy_item,	self.on_trade,						self) -- for game stats
	--self.object:set_callback(callback.actor_sleep,		self.sleep_callback,				self)
	self.object:set_callback(callback.task_state,			self.task_callback,					self)
	--self.object:set_callback(callback.map_location_added, self.map_location_added_callback, 	self)
	self.object:set_callback(callback.level_border_enter,	self.level_border_enter,			self)
	self.object:set_callback(callback.level_border_exit,	self.level_border_exit,				self)
	self.object:set_callback(callback.take_item_from_box,	self.take_item_from_box,			self)
	self.object:set_callback(callback.death,				self.death_callback,				self)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:death_callback( victim, who )
	if db.actor:item_in_slot( 5 ) then
		db.actor:activate_slot( 0 )
	end
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:take_item_from_box(box, item)
	local story_id = box:story_id()
	if story_id == nil then
		return
	end

	treasure_manager.take_item_from_box(box, story_id)

	--AMK UTILS--
	amk.on_item_take_from_box(box,item)
	amk_utils.actor_item_from_box(box, item)
	amk_treasurebox.on_take_item_from_box(box,item)
	--AMK UTILS--
	gps_habar.on_item_take_from_box(box, item)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:level_border_enter(npc, info_id)
	self.actor_detector:actor_enter()

	amk_utils.actor_level_border_enter(npc, info_id)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:level_border_exit(npc, info_id)
	self.actor_detector:actor_exit()

	amk_utils.actor_level_border_exit(npc, info_id)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:info_callback(npc, info_id)
	--printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
	--' Сюжет
	level_tasks.proceed(self.object)
	-- Отметки на карте
	level_tasks.process_info_portion(info_id)
	--wpn_mod.on_info(info_id)
	--AMK UTILS--
	amk.on_info(npc,info_id)
	amk_utils.actor_info(npc, info_id)
	--AMK UTILS--
	-- Состояние инвентаря
	_Sin_Linking.Sin_Info_callback(npc, info_id)
	if info_id == "ui_inventory" then
		inv.on_inv_open()
	elseif info_id == "ui_inventory_hide" then
		inv.on_inv_close()
	elseif info_id == "ui_trade" then
		inv.on_trade_open()
	elseif info_id == "ui_trade_hide" then
		inv.on_trade_close()
	elseif info_id == "ui_car_body" then
		inv.on_search_open()
	elseif info_id == "ui_car_body_hide" then
		inv.on_search_close()
	end
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:on_trade (item, sell_bye, money)
	--[[
	if sell_bye == true then
		game_stats.money_trade_update (money)
	else
		game_stats.money_trade_update (-money)
	end
	]]
	gps_habar.on_trade(item, sell_bye)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:article_callback(npc, group, name)
	--printf("article_callback [%s][%s]", group, name)
	if device().precache_frame >1 then return end

	if group == "Diary" then
		news_manager.send_encyclopedy("diary", group)
	else
		news_manager.send_encyclopedy("encyclopedy", group)
	end

	--AMK UTILS--
	amk.on_info(npc,info_id)
	amk_utils.actor_article(npc, group, name)
	--AMK UTILS--
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:on_item_take (obj)
	if xrs_ai then
		xrs_ai.actor_item_take(obj)
	end
	level_tasks.proceed(self.object)
	--game_stats.update_take_item (obj, self.object)
	_Sin_Linking.Sin_On_item_take (obj)
	--AMK UTILS--
	amk.on_item_take(obj)
	amk_utils.actor_item_take(obj)
	--AMK UTILS--
	kirag_take_drop.on_take(obj)
	gps_habar.on_item_take(obj)
	if rx_ai then
		rx_ai.actor_item_take(obj)
	end
	if xrs_grenade then
		xrs_grenade.fake_pickup(obj)
	end

	zoa_give_info.onItemTake( obj )

	--if actor picks up NPC animation item, give artefact instead
	if obj:section() == "bread_a" then
		alife():release( alife():object( obj:id() ) )
		tkgp_utils.giveActor( "bread_b" )
	end
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:on_item_drop( obj )
	level_tasks.proceed(self.object)
	--game_stats.update_drop_item (obj, self.object)
	-- if level.vertex_position(db.actor:level_vertex_id()):distance_to(db.actor:position())>1 then
		-- amk.mylog("Здесь нет вертексов")
	-- else
		-- amk.mylog("Вертекс "..db.actor:level_vertex_id().." "..db.actor:game_vertex_id())
	-- end
	--wpn_mod.on_drop(obj)
	--AMK UTILS--
	_Sin_Linking.Sin_On_item_drop (obj)
	--zoa_magma.onItemDrop( obj )
	amk.on_item_drop(obj)
	amk_utils.actor_item_drop(obj)
	--AMK UTILS--

	kirag_take_drop.on_drop(obj)
	--wpn_mod.itemuse(obj)
	gps_habar.on_item_drop(obj)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:use_object( obj )
	lurk_inv_effects.start( obj )
	zoa_give_info.onItemUse( obj )
	zoa_ammunition.spawn_ammunition( obj )
	zoa_duration_effects.onItemUse( obj )
	zoa_medkit.spawn_medical_supplies( obj )
	zoa_multiscope.onItemUse( obj )
	zoa_nv_kit.onItemUse( obj )
	zoa_quickdrop.onItemUse( obj )
	zoa_rebox.onItemUse( obj )
	zoa_repair.onItemUse( obj )
	zoa_magma.onItemUse( obj )
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:task_callback(_task, _objective, _state)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	if _objective:get_idx() == 0 then
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end

	--AMK UTILS--
	amk_utils.actor_task(_task, _objective, _state)
	--AMK UTILS--
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:map_location_added_callback(spot_type_str, object_id)
	if (false==app_ready()) or (device().precache_frame>1) then return end
	--'news_manager.send_task(db.actor, "new")
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:update( delta )
	zoa_periodic_functions.onUpdate()

	lurk_inv_effects.weapontimer()
	object_binder.update(self, delta)

	if not self.updated then
		if inv.init_dark_matter() then
			self.updated = true
		end
	end
	-- DEBUG slowdown
	--	slowdown.update()

	local time = time_global()

	--game_stats.update (delta, self.object)

	-- $DreamMod	апдейт схемы сна
	if sleep_manager.is_sleep_active() and xr_conditions.actor_dead() then
		xr_logic.issue_event(db.actor, db.storage[db.actor:id()]["ar_sleep"], "update")
	end

	ammo_manager.update()
	kirag_take_drop.on_update()
	kirag_take_drop.autopickup_update()

	if not inv.inv_mass then
		inv.update_mass()
	end

	-- апдейт погоды
	self.weather_manager:update()

	-- апдейт схемы детектора
	self.actor_detector:update()

	shader_control.update()

	-- апдейт звуковой схемы актера
	xr_sound.update_actor()

	-- ARENA_EXTENSION_MOD --
	aem_manager.get_aem():update()
	--aem_grenade.scan_dif() --for debug only
	-- ARENA_EXTENSION_MOD --

	if not xr_logic.pstor_retrieve( db.actor, "didDrKeyTest", false ) and db.actor:object( "cit_doctors_key" ) then
		xr_logic.pstor_store( db.actor, "didDrKeyTest", true )
		db.actor:give_info_portion( "cit_jail_doctor_pryp_task" )
    end

	--' Проверка потери жизни
	--[[
	if self.object.health - lasthealth > 0.001 or
		 self.object.health - lasthealth < -0.001 then
		printf("%f | %f", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
		lasthealth = self.object.health
		lasttime = game.time()
	end
	]]

	-- Обновление отключения ввода с клавиатуры.
	if self.st.disable_input_time ~= nil and
		 game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle
	then
		level.enable_input()
		self.st.disable_input_time = nil
	end
	-- Обновление сна с переносом чувака в указанную позицию
	if self.st.sleep_relocate_time ~= nil and
		 game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle
	then
		self.object:set_actor_position(self.st.sleep_relocate_point)
		local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
		self.object:set_actor_direction(dir:getH())
		self.st.sleep_relocate_time = nil
	end

	-- Апдейт прятание оружия игрока во время диалога
	if weapon_hide == true or self.object:is_talking() then
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
	end

	--COPINV start--
	if db.actor then
		if has_alife_info( "ui_inventory" ) then
			ui_cop_health.add_custom_inv()
			ui_cop_stamina.add_custom_inv()
			ui_cop_psy.add_custom_inv()

			ui_cop_rad.add_rad_empty()
			ui_cop_blood.add_blood_empty()

			ui_cop_rad.add_rad_green()
			ui_cop_rad.add_rad_yellow()
			ui_cop_rad.add_rad_orange()
			ui_cop_rad.add_rad_red()

			ui_cop_blood.add_blood_green()
			ui_cop_blood.add_blood_yellow()
			ui_cop_blood.add_blood_orange()
			ui_cop_blood.add_blood_red()
		else
			ui_cop_health.remove_custom_inv()
			ui_cop_stamina.remove_custom_inv()
			ui_cop_psy.remove_custom_inv()

			ui_cop_rad.remove_rad_empty()
			ui_cop_blood.remove_blood_empty()

			ui_cop_rad.remove_rad_green()
			ui_cop_rad.remove_rad_yellow()
			ui_cop_rad.remove_rad_orange()
			ui_cop_rad.remove_rad_red()

			ui_cop_blood.remove_blood_green()
			ui_cop_blood.remove_blood_yellow()
			ui_cop_blood.remove_blood_orange()
			ui_cop_blood.remove_blood_red()
		end

		if has_alife_info( "ui_trade" ) or has_alife_info( "ui_car_body" ) then
			ui_faction.add_custom_inv()
		else
			ui_faction.remove_custom_inv()
		end
	end

	--md_indicator.wounded(db.actor.health,"ui_hud_health")
	--md_indicator.power(db.actor.power,"ui_hud_power")
	--md_indicator.irradiated(db.actor.radiation,"ui_hud_irradiated")

	ogse_effectors.doabcevents()
	--COPINV end--

	-- обновление рестрикторов, которые под логикой, срабатывает через интервалы времени
	if self.next_restrictors_update_time < time then
		bind_restrictor.actor_update(delta)

		self.next_restrictors_update_time = time + 200

		task_manager.actor_update()
	end

	-- обновление постпроцессов
	if post_process ~= 0 then
		if post_process:update () == true then
			 post_process = 0
		end
	end

	-- обновление пси-антенны
	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:update(delta)
	end

	--[[ local hud_demo = get_hud()
		local custom_static_demo = hud_demo:GetCustomStatic("cs_demo_play")

		if custom_static_demo == nil then
		hud_demo:AddCustomStatic("cs_demo_play", true)
		hud_demo:GetCustomStatic("cs_demo_play"):wnd():SetTextST("st_demo_play")
	end
	]]

	--' Вывод сообщения о большой радиации
	if self.object.radiation >= 0.7 then
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static == nil then
			hud:AddCustomStatic("cs_radiation_danger", true)
			hud:GetCustomStatic("cs_radiation_danger"):wnd():SetTextST("st_radiation_danger")
		end
	else
		local hud = get_hud()
		local custom_static = hud:GetCustomStatic("cs_radiation_danger")
		if custom_static ~= nil then
			hud:RemoveCustomStatic("cs_radiation_danger")
		end
	end

	if self.bCheckStart then
		--printf("SET DEFAULT INFOS")

		if not has_alife_info("storyline_actor_start") and level.name() == "l01_escape"	then
			_Sin_Linking.Sin_Start()
			self.object:give_info_portion("storyline_actor_start")
			_G.g_start_avi = true
			--printf("*AVI* RUN START AVI")
		end

		--if not has_alife_info("encyclopedy") then
			--self.object:give_info_portion("encyclopedy")
		--end

		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end
		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end

		level_tasks.add_lchanger_location()
		self.bCheckStart = false
	end

	_Sin_Linking.Sin_Update(delta)

	--AMK UTILS--
	amk.on_actor_upade(delta)
	amk_utils.actor_update(delta)
	gps_habar.on_actor_upade(delta)
	xr_giditara.item_update()
	--AMK UTILS--

	-- added by Red75. Контроль за переполнением
	if self.warning then
		self.warning=nil
		get_hud():AddCustomStatic("hud_save_warning")
		local wnd=get_hud():GetCustomStatic("hud_save_warning"):wnd()
		if self.critical==1 then
			wnd:SetTextST(game.translate_string("amk_warn_trans"))
			self.critical=nil
		elseif self.critical==2 then
			wnd:SetTextST(game.translate_string("amk_warn_trans_critical"))
			self.critical=nil
		else
			wnd:SetTextST(game.translate_string("amk_warn_attention"))
		end
	elseif self.wt and self.wt<time_global() then
		self.wt=nil
		if get_hud():GetCustomStatic("hud_save_warning") then
			get_hud():RemoveCustomStatic("hud_save_warning")
		end
	end
	if xrs_ai then xrs_ai.actor_update(delta) end
	if rx_ai then rx_ai.actor_update() end
	if xrs_grenade then xrs_grenade.update(delta) end
	if dinamic_hud then
		dinamic_hud.update()
	end
	--wpn_mod.update()
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:save(packet)
	if rx_ai then
		rx_ai.actor_save(packet)
	end
	local save_treasure_manager = true
	local pk1=fake_net_packet.fake_net_packet()
	self:save_old(pk1)
	amk.mylog("Packet size is "..pk1:w_tell())
	if pk1:w_tell()>7500 then
		self.warning=true
		self.critical=1
		self.wt=time_global()+60000
		amk.emergency_cleanup()
		self:save_old(packet)
		amk.mylog("Actor packet size is "..packet:w_tell().."!")
		amk.emergency_restore()
	elseif pk1:w_tell()>6000 then
		self.warning=true
		self.wt=time_global()+60000
		self:save_old(packet)
	else
		self:save_old(packet)
		self.wt=time_global()
	end
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:save_old(packet)
	local save_treasure_manager = true

	--printf("actor_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	--' Сохраняем уровень сложности
	if save_treasure_manager == true then
		packet:w_u8(level.get_game_difficulty() + 128)
	else
		packet:w_u8(level.get_game_difficulty())
	end

	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packer:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)

	sr_psy_antenna.save( packet )

	if save_treasure_manager == true then
		treasure_manager.save(packet)
	end

	task_manager.save(packet)
	self.actor_detector:save(packet)
	_Sin_Linking.Sin_Save(packet)
end

----------------------------------------------------------------------------------------------------------------------

function actor_binder:load(reader)
	printf("actor_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	printf("actor_binder:object_binder.load(): self.object:name()='%s'", self.object:name())

	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()

	local load_treasure_manager = false
	if game_difficulty >= 128 then
		game_difficulty = game_difficulty - 128
		load_treasure_manager = true
	end

	if game_difficulty < 0 or game_difficulty > 3 then
		game_difficulty = 1
	end

	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	if reader:r_eof() then
		abort("SAVE FILE IS CORRUPT")
	end

	local stored_input_time = reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(self.object, reader)
	self.weather_manager:load(reader)

	sr_psy_antenna.load(reader)

	if load_treasure_manager == true then
		treasure_manager.load(reader)
	end


	task_manager.load(reader)
	self.actor_detector:load(reader)
	_Sin_Linking.Sin_Load(reader)
	if xr_logic.pstor_retrieve(self.object,"emerg",false) then -- нельзя использовать amk.load_varible(), так как db.actor ещё не определён
		self.warning=true
		self.critical=2
		self.wt=time_global()+60000
	end
end

----------------------------------------------------------------------------------------------------------------------

--старт префетча звуков
--if string.find(command_line(), "-noprefetch") == nil then
--	sound_prefetch.prefetch_sounds()
--end


-- Weapon functions
function hide_weapon()
	weapon_hide = true
end
function restore_weapon()
	weapon_hide = false
end

--[[
// this is test for section iteration
/**
local function test_section_iteration(file_name, section_name)
	printf			("file		: %s",file_name)
	printf			("section : %s",section_name)

	local		 file = ini_file(file_name)
	local		 n = file:line_count(section_name)
	printf			("lines	 : %d",n)

	local		 id, value = "", "", result
	for i=0,n-1 do
		result, id, value = file:r_line(section_name,i,"","")
		printf		("line %d : %s = %s",i,id,value)
	end
end

test_section_iteration("system.ltx","space_restrictor")
/**/
]]
